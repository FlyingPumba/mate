package org.mate.commons.interaction.action.espresso;

import android.content.res.Resources;
import android.view.View;
import android.widget.TextView;

import androidx.annotation.Nullable;

import org.mate.commons.utils.MATELog;

import java.util.Objects;
import java.util.UUID;

/**
 * Wrapper around the View class.
 * It provides useful information for building Espresso ViewMatchers and ViewActions.
 */
public class EspressoView {

    /**
     * An auto-generated random UUID, used to compare different instances of EspressoView.
     * Note that this value will be different for different instances constructed with the same
     * View.
     */
    private final UUID randomUUID;

    /**
     * The View instance that we are wrapping.
     */
    private final View view;

    /**
     * The Activity name in which this View was found.
     */
    private final String activityName;

    public EspressoView(View view, String activityName) {
        this.randomUUID = UUID.randomUUID();
        this.view = view;
        this.activityName = activityName;
    }

    /**
     * @return the Activity name in which the View was found.
     */
    public String getActivity() {
        return activityName;
    }

    /**
     * @return The View instance that we are wrapping.
     */
    public View getView() {
        return view;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        EspressoView that = (EspressoView) o;
        return randomUUID.equals(that.randomUUID);
    }

    @Override
    public int hashCode() {
        return Objects.hash(randomUUID);
    }

    /**
     * @return the View's ID (a.k.a., resource ID) if it has one, -1 otherwise.
     */
    public Integer getId() {
        return view.getId();
    }

    /**
     * @return the View's class name.
     */
    public String getClassName() {
        return view.getClass().getName();
    }

    /**
     * @return the View's content description if it has one, null otherwise.
     */
    public @Nullable
    String getContentDescription() {
        CharSequence contentDescription = view.getContentDescription();
        if (contentDescription != null) {
            return contentDescription.toString();
        }

        return null;
    }

    /**
     * @return the View's text if it has one, null otherwise.
     */
    public @Nullable String getText() {
        if (view instanceof TextView) {
            CharSequence text = ((TextView) view).getText();
            if (text != null) {
                return text.toString();
            }
        }

        return null;
    }

    /**
     * This method's implementation was taken from of Espresso's WithResourceNameMatcher class.
     * @return the View's resource name if it has one, null otherwise.
     */
    public @Nullable String getResourceName() {
        int id = view.getId();

        if (id == View.NO_ID) {
            // view.getId() was View.NO_ID
            return null;
        }

        if (view.getResources() == null) {
            // view.getResources() was null, can't resolve resource name
            return null;
        }
        if (isViewIdGenerated(id)) {
            // view.getId() was generated by a call to View.generateViewId()
            return null;
        }

        String resourceName = safeGetResourceEntryName(view.getResources(), id);

        if (resourceName == null) {
            MATELog.log_warn(String.format("Unable to find resource name for view with id %d", id));
            return null;
        }

        return resourceName;
    }

    /**
     * @return a boolean indicating whether the wrapped view is an Android view (e.g., created by
     * the OS) or not.
     */
    public boolean isAndroidView() {
        String resourceName = getResourceName();
        if (resourceName == null) {
            return false;
        }

        return resourceName.startsWith("android")
                || resourceName.startsWith("com.google.android")
                || resourceName.startsWith("com.android");
    }

    /**
     * This method's implementation was taken from Espresso's ViewMatchers#safeGetResourceEntryName
     * method.
     *
     * Get the resource entry name given an integer identifier in a safe manner. This means:
     *
     * <ul>
     *   <li>Handling {@link Resources.NotFoundException} if thrown.
     *   <li>Not querying the resources if the identifier is generated. This would otherwise always
     *       fail and will log an error. This should be avoided because in some testing frameworks,
     *       logging an error will make the test fail.
     * </ul>
     *
     * @param res The {@link Resources} to query for the ID.
     * @param id The ID to query.
     * @return The resource entry name or {@code null} if not found.
     * @see #isViewIdGenerated(int)
     * @see Resources#getResourceEntryName(int)
     */
    private static String safeGetResourceEntryName(Resources res, int id) {
        try {
            return isViewIdGenerated(id) ? null : res.getResourceEntryName(id);
        } catch (Resources.NotFoundException e) {
            return null;
        }
    }

    /**
     * IDs generated by {@link View#generateViewId} will fail if used as a resource ID in attempted
     * resources lookups. This now logs an error in API 28, causing test failures. This method is
     * taken from {@link View#isViewIdGenerated} to prevent resource lookup to check if a view id was
     * generated.
     */
    private static boolean isViewIdGenerated(int id) {
        return (id & 0xFF000000) == 0 && (id & 0x00FFFFFF) != 0;
    }
}
